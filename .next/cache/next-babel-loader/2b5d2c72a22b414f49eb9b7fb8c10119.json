{"ast":null,"code":"import { all, put, delay, fork, takeLatest, call } from \"@redux-saga/core/effects\";\nimport axios from 'axios';\nimport { ADD_POST_FAILURE, ADD_POST_SUCCESS, ADD_POST_REQUEST, ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS, ADD_COMMENT_REQUEST, REMOVE_POST_REQUEST, REMOVE_POST_FAILURE, REMOVE_POST_SUCCESS, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostsAPI(data) {\n  return axios.get('/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`, data);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/remove', data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000); //  const result = yield call(addpostAPI,action.data)\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.data\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchremovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nexport default function* postSage() {\n  yield all([fork(watchUnlikePost), fork(watchLikePost), fork(watchAddPost), fork(watchAddComment), fork(watchremovePost), fork(watchLoadPosts)]);\n}","map":{"version":3,"sources":["C:/Users/SangHo/Desktop/inflearn/react-nodebird/front/sagas/post.js"],"names":["all","put","delay","fork","takeLatest","call","axios","ADD_POST_FAILURE","ADD_POST_SUCCESS","ADD_POST_REQUEST","ADD_COMMENT_FAILURE","ADD_COMMENT_SUCCESS","ADD_COMMENT_REQUEST","REMOVE_POST_REQUEST","REMOVE_POST_FAILURE","REMOVE_POST_SUCCESS","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","data","get","loadPosts","action","result","type","err","response","likePostAPI","patch","likePost","unlikePostAPI","unlikePost","addPostAPI","post","content","addPost","id","addCommentAPI","postId","addComment","console","error","removePostAPI","delete","removePost","watchLikePost","watchUnlikePost","watchAddPost","watchAddComment","watchremovePost","watchLoadPosts","postSage"],"mappings":"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","sourcesContent":["import { all, put, delay, fork, takeLatest, call } from \"@redux-saga/core/effects\";\r\nimport axios from 'axios';\r\n\r\nimport {\r\n  ADD_POST_FAILURE, ADD_POST_SUCCESS, ADD_POST_REQUEST,\r\n  ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS, ADD_COMMENT_REQUEST,\r\n  REMOVE_POST_REQUEST, REMOVE_POST_FAILURE, REMOVE_POST_SUCCESS,\r\n  LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE,\r\n  UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE,\r\n  LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction loadPostsAPI(data) {\r\n  return axios.get('/posts', data);\r\n}\r\nfunction* loadPosts(action) {\r\n  try {\r\n    const result = yield call(loadPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n  return axios.patch(`/post/${data}/like`, data);\r\n}\r\nfunction* likePost(action) {\r\n  try {\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({\r\n      type: LIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n  return axios.patch(`/post/${data}/like`);\r\n}\r\nfunction* unlikePost(action) {\r\n  try {\r\n    const result = yield call(unlikePostAPI, action.data);\r\n    yield put({\r\n      type: UNLIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: UNLIKE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post('/post', { content: data });\r\n}\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\r\n}\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete('/api/remove', data);\r\n}\r\nfunction* removePost(action) {\r\n  try {\r\n    yield delay(1000);\r\n    //  const result = yield call(addpostAPI,action.data)\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nfunction* watchremovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nfunction* watchLoadPosts() {\r\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nexport default function* postSage() {\r\n  yield all([\r\n    fork(watchUnlikePost),\r\n    fork(watchLikePost),\r\n    fork(watchAddPost),\r\n    fork(watchAddComment),\r\n    fork(watchremovePost),\r\n    fork(watchLoadPosts),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}