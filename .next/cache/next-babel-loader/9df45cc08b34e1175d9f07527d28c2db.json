{"ast":null,"code":"import { all, fork, put, delay, takeLatest } from \"@redux-saga/core/effects\";\nimport axios from 'axios';\nimport { LOG_IN_FAILURE, LOG_IN_SUCCESS, LOG_IN_REQUEST, LOG_OUT_FAILURE, LOG_OUT_SUCCESS, LOG_OUT_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, SIGN_UP_REQUEST } from '../reducers/user';\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  // 일로 들어옴\n  try {\n    //    const result = yield call(logInAPI,action.data) //첫번쨰 자리는 함수고 나머지는 인수들 \n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    //  const result = yield call(logOutAPI)\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS //    data:result.data\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.data\n    });\n  }\n}\n\nfunction signUpAPI() {\n  return axios.post('/api/signUp');\n}\n\nfunction* signUp() {\n  try {\n    //  const result = yield call(signUpAPI)\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS //    data:result.data\n\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/SangHo/Desktop/inflearn/react-nodebird/front/sagas/user.js"],"names":["all","fork","put","delay","takeLatest","axios","LOG_IN_FAILURE","LOG_IN_SUCCESS","LOG_IN_REQUEST","LOG_OUT_FAILURE","LOG_OUT_SUCCESS","LOG_OUT_REQUEST","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","SIGN_UP_REQUEST","logInAPI","data","post","logIn","action","type","err","error","logOutAPI","logOut","signUpAPI","signUp","watchLogin","watchLogOut","watchSignUp","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,KAAzB,EAAgCC,UAAhC,QAAkD,0BAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACQC,cADR,EACwBC,cADxB,EACyCC,cADzC,EAEQC,eAFR,EAEyBC,eAFzB,EAE0CC,eAF1C,EAGQC,eAHR,EAGyBC,eAHzB,EAG2CC,eAH3C,QAIO,kBAJP;;AAMA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOX,KAAK,CAACY,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACD;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AAAK;AACzB,MAAI;AACR;AACG,UAAMhB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAACb,cADC;AAENS,MAAAA,IAAI,EAACG,MAAM,CAACH;AAFN,KAAD,CAAT;AAIC,GAPA,CAOC,OAAOK,GAAP,EAAY;AACV,UAAMnB,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAACd,cADC;AAENgB,MAAAA,KAAK,EAACD,GAAG,CAACL;AAFJ,KAAD,CAAT;AAIH;AACH;;AAED,SAASO,SAAT,GAAqB;AACjB,SAAOlB,KAAK,CAACY,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUO,MAAV,GAAmB;AACf,MAAI;AAEN;AACA,UAAMrB,KAAK,CAAC,IAAD,CAAX;AACC,UAAMD,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAACV,eADC,CAET;;AAFS,KAAD,CAAT;AAIC,GARA,CAQC,OAAOW,GAAP,EAAY;AACV,UAAMnB,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAACX,eADC;AAENa,MAAAA,KAAK,EAACD,GAAG,CAACL;AAFJ,KAAD,CAAT;AAIH;AACH;;AAGH,SAASS,SAAT,GAAqB;AACnB,SAAOpB,KAAK,CAACY,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUS,MAAV,GAAmB;AACf,MAAI;AAEN;AACA,UAAMvB,KAAK,CAAC,IAAD,CAAX;AACC,UAAMD,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAACP,eADC,CAET;;AAFS,KAAD,CAAT;AAIC,GARA,CAQC,OAAOQ,GAAP,EAAY;AACV,UAAMnB,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAACR,eADC;AAENU,MAAAA,KAAK,EAACD,GAAG,CAACL;AAFJ,KAAD,CAAT;AAIH;AACH;;AAKH,UAAUW,UAAV,GAAuB;AAEnB,QAAMvB,UAAU,CAACI,cAAD,EAAiBU,KAAjB,CAAhB;AACH;;AACD,UAAUU,WAAV,GAAwB;AAEpB,QAAMxB,UAAU,CAACO,eAAD,EAAkBa,MAAlB,CAAhB;AACH;;AACD,UAAUK,WAAV,GAAwB;AACpB,QAAMzB,UAAU,CAACU,eAAD,EAAkBY,MAAlB,CAAhB;AACH;;AACD,eAAe,UAAUI,QAAV,GAAqB;AAChC,QAAM9B,GAAG,CAAC,CACTC,IAAI,CAAC0B,UAAD,CADK,EAET1B,IAAI,CAAC2B,WAAD,CAFK,EAGT3B,IAAI,CAAC4B,WAAD,CAHK,CAAD,CAAT;AAKH","sourcesContent":["import { all, fork, put, delay, takeLatest } from \"@redux-saga/core/effects\";\r\nimport axios from 'axios'\r\nimport {\r\n        LOG_IN_FAILURE, LOG_IN_SUCCESS,  LOG_IN_REQUEST,\r\n        LOG_OUT_FAILURE ,LOG_OUT_SUCCESS ,LOG_OUT_REQUEST,\r\n        SIGN_UP_FAILURE, SIGN_UP_SUCCESS , SIGN_UP_REQUEST\r\n} from '../reducers/user'\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post('/api/login', data)\r\n  } \r\n  \r\n  function* logIn(action) {    // 일로 들어옴\r\n      try {\r\n  //    const result = yield call(logInAPI,action.data) //첫번쨰 자리는 함수고 나머지는 인수들 \r\n     yield delay(1000);\r\n     yield put({\r\n         type:LOG_IN_SUCCESS,\r\n         data:action.data\r\n      });\r\n     } catch (err) {\r\n         yield put({\r\n             type:LOG_IN_FAILURE,\r\n             error:err.data\r\n         })\r\n     }\r\n  }\r\n  \r\n  function logOutAPI() {\r\n      return axios.post('/api/logout')\r\n    }\r\n\r\n    function* logOut() {\r\n        try {\r\n          \r\n      //  const result = yield call(logOutAPI)\r\n      yield delay(1000);\r\n       yield put({\r\n           type:LOG_OUT_SUCCESS,\r\n        //    data:result.data\r\n        });\r\n       } catch (err) {\r\n           yield put({\r\n               type:LOG_OUT_FAILURE,\r\n               error:err.data\r\n           })\r\n       }\r\n    }\r\n  \r\n      \r\n  function signUpAPI() {\r\n    return axios.post('/api/signUp')\r\n  }\r\n\r\n  function* signUp() {\r\n      try {\r\n        \r\n    //  const result = yield call(signUpAPI)\r\n    yield delay(1000);\r\n     yield put({\r\n         type:SIGN_UP_SUCCESS,\r\n      //    data:result.data\r\n      });\r\n     } catch (err) {\r\n         yield put({\r\n             type:SIGN_UP_FAILURE,\r\n             error:err.data\r\n         })\r\n     }\r\n  }\r\n\r\n\r\n\r\n\r\nfunction* watchLogin() {\r\n\r\n    yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\nfunction* watchLogOut() {\r\n\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut)\r\n}\r\nfunction* watchSignUp() {\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp)\r\n}\r\nexport default function* userSaga() {\r\n    yield all([\r\n     fork(watchLogin),\r\n     fork(watchLogOut),\r\n     fork(watchSignUp),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}