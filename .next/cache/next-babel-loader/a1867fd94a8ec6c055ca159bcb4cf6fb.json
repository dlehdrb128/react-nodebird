{"ast":null,"code":"import { createWrapper } from \"next-redux-wrapper\";\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport reducer from \"../reducers\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '../sagas';\n\nconst loggerMiddleware = ({\n  dispatch,\n  getState\n}) => next => action => {\n  return next(action);\n};\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware, loggerMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["C:/Users/SangHo/Desktop/inflearn/react-nodebird/front/store/configureStore.js"],"names":["createWrapper","applyMiddleware","compose","createStore","reducer","composeWithDevTools","createSagaMiddleware","rootSaga","loggerMiddleware","dispatch","getState","next","action","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAAQA,aAAR,QAA4B,oBAA5B;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAKA,MAAMC,gBAAgB,GAAI,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA6BC,IAAD,IAAWC,MAAD,IAAY;AACxE,SAAOD,IAAI,CAACC,MAAD,CAAX;AACD,CAFH;;AAKA,MAAMC,cAAc,GAAG,MAAM;AAC3B,QAAMC,cAAc,GAAGR,oBAAoB,EAA3C;AACA,QAAMS,WAAW,GAAG,CAACD,cAAD,EAAiBN,gBAAjB,CAApB;AACA,QAAMQ,QAAQ,GAAG,QACdd,OAAO,CAACD,eAAe,CAAC,GAAGc,WAAJ,CAAhB,CADO,GAEdV,mBAAmB,CAACJ,eAAe,CAAC,GAAGc,WAAJ,CAAhB,CAFtB;AAGA,QAAME,KAAK,GAAGd,WAAW,CAACC,OAAD,EAASY,QAAT,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBZ,QAAnB,CAAjB;AAEA,SAAOU,KAAP;AACD,CAVD;;AAYA,MAAMG,OAAO,GAAGpB,aAAa,CAACa,cAAD,EAAiB;AAC5CQ,EAAAA,KAAK;AADuC,CAAjB,CAA7B;AAIA,eAAeD,OAAf","sourcesContent":["import {createWrapper} from \"next-redux-wrapper\";\r\nimport { applyMiddleware, compose, createStore } from \"redux\";\r\nimport reducer from \"../reducers\";\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from '../sagas';\r\n\r\n\r\n\r\n\r\nconst loggerMiddleware =  ({ dispatch, getState }) => (next) => (action) => {\r\n    return next(action);\r\n  };\r\n\r\n\r\nconst configureStore = () => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middlewares = [sagaMiddleware, loggerMiddleware];\r\n  const enhancer = process.env.NODE_ENV === 'production'\r\n   ? compose(applyMiddleware(...middlewares))\r\n   : composeWithDevTools(applyMiddleware(...middlewares))\r\n  const store = createStore(reducer,enhancer);\r\n  store.sagaTask = sagaMiddleware.run(rootSaga);\r\n\r\n  return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, {\r\n  debug: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}