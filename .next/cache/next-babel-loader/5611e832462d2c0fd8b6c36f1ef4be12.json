{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchremovePost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchloadPost),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(postSage);\n\nimport { all, put, delay, fork, takeLatest } from \"@redux-saga/core/effects\";\nimport axios from 'axios';\nimport shortid from 'shortid';\nimport { ADD_POST_FAILURE, ADD_POST_SUCCESS, ADD_POST_REQUEST, ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS, ADD_COMMENT_REQUEST, REMOVE_POST_REQUEST, REMOVE_POST_FAILURE, REMOVE_POST_SUCCESS, LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          id = shortid.generate(); //  const result = yield call(addpostAPI,action.data)\n\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/post/\".concat(data.postId, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context2.t0.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction removePostAPI(data) {\n  return axios[\"delete\"]('/api/remove', data);\n}\n\nfunction removePost(action) {\n  return _regeneratorRuntime.wrap(function removePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context3.next = 7;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 7:\n          _context3.next = 13;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 13;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            data: _context3.t0.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchremovePost() {\n  return _regeneratorRuntime.wrap(function watchremovePost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchloadPost() {\n  return _regeneratorRuntime.wrap(function watchloadPost$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(LOAD_POSTS_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nexport default function postSage() {\n  return _regeneratorRuntime.wrap(function postSage$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment), fork(watchremovePost), fork(watchloadPost)]);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}","map":{"version":3,"sources":["C:/Users/SangHo/Desktop/inflearn/react-nodebird/front/sagas/post.js"],"names":["addPost","addComment","removePost","watchAddPost","watchAddComment","watchremovePost","watchloadPost","postSage","all","put","delay","fork","takeLatest","axios","shortid","ADD_POST_FAILURE","ADD_POST_SUCCESS","ADD_POST_REQUEST","ADD_COMMENT_FAILURE","ADD_COMMENT_SUCCESS","ADD_COMMENT_REQUEST","REMOVE_POST_REQUEST","REMOVE_POST_FAILURE","REMOVE_POST_SUCCESS","LOAD_POSTS_REQUEST","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","action","id","generate","type","content","addCommentAPI","postId","removePostAPI"],"mappings":"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","sourcesContent":["import { all, put, delay, fork, takeLatest } from \"@redux-saga/core/effects\";\r\nimport axios from 'axios'\r\nimport shortid from 'shortid';\r\n\r\nimport {ADD_POST_FAILURE, ADD_POST_SUCCESS, ADD_POST_REQUEST,\r\n  ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS, ADD_COMMENT_REQUEST,\r\n  REMOVE_POST_REQUEST, REMOVE_POST_FAILURE, REMOVE_POST_SUCCESS, LOAD_POSTS_REQUEST,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post('/api/post', data);\r\n}\r\nfunction* addPost(action) {\r\n  try {\r\n    yield delay(1000);\r\n    const id = shortid.generate();\r\n    //  const result = yield call(addpostAPI,action.data)\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\nfunction* addComment(action) {\r\n  try {\r\n    yield delay(1000);\r\n    //  const result = yield call(addpostAPI,action.data)\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.data,\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.delete('/api/remove', data);\r\n  }\r\n  function* removePost(action) {\r\n    try {\r\n      yield delay(1000);\r\n      //  const result = yield call(addpostAPI,action.data)\r\n      yield put({\r\n        type: REMOVE_POST_SUCCESS,\r\n        data: action.data,\r\n      });\r\n      yield put({\r\n        type: REMOVE_POST_OF_ME,\r\n        data: action.data,\r\n      });\r\n    } catch (err) {\r\n      yield put({\r\n        type: REMOVE_POST_FAILURE,\r\n        data: err.data,\r\n      });\r\n    }\r\n  }\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nfunction* watchremovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nfunction* watchloadPost() {\r\n  yield takeLatest(LOAD_POSTS_REQUEST, removePost);\r\n}\r\n\r\nexport default function* postSage() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchAddComment),\r\n    fork(watchremovePost),\r\n    fork(watchloadPost),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}