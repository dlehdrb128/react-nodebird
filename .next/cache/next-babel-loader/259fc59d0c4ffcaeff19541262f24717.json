{"ast":null,"code":"import { all, put, delay, fork, takeLatest, call } from \"@redux-saga/core/effects\";\nimport axios from 'axios';\nimport { ADD_POST_FAILURE, ADD_POST_SUCCESS, ADD_POST_REQUEST, ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS, ADD_COMMENT_REQUEST, REMOVE_POST_REQUEST, REMOVE_POST_FAILURE, REMOVE_POST_SUCCESS, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostsAPI(data) {\n  return axios.get('/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/remove', data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000); //  const result = yield call(addpostAPI,action.data)\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.data\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchremovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nexport default function* postSage() {\n  yield all([fork(watchUnlikePost), fork(watchLikePost), fork(watchAddPost), fork(watchAddComment), fork(watchremovePost), fork(watchLoadPosts)]);\n}","map":{"version":3,"sources":["C:/Users/SangHo/Desktop/inflearn/react-nodebird/front/sagas/post.js"],"names":["all","put","delay","fork","takeLatest","call","axios","ADD_POST_FAILURE","ADD_POST_SUCCESS","ADD_POST_REQUEST","ADD_COMMENT_FAILURE","ADD_COMMENT_SUCCESS","ADD_COMMENT_REQUEST","REMOVE_POST_REQUEST","REMOVE_POST_FAILURE","REMOVE_POST_SUCCESS","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","data","get","loadPosts","action","result","type","err","response","addPostAPI","post","content","addPost","id","addCommentAPI","postId","addComment","console","error","removePostAPI","delete","removePost","watchLikePost","LIKE_POST_REQUEST","likePost","watchUnlikePost","UNLIKE_POST_REQUEST","unlikePost","watchAddPost","watchAddComment","watchremovePost","watchLoadPosts","postSage"],"mappings":"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","sourcesContent":["import { all, put, delay, fork, takeLatest, call } from \"@redux-saga/core/effects\";\r\nimport axios from 'axios';\r\n\r\nimport {\r\n  ADD_POST_FAILURE, ADD_POST_SUCCESS, ADD_POST_REQUEST,\r\n  ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS, ADD_COMMENT_REQUEST,\r\n  REMOVE_POST_REQUEST, REMOVE_POST_FAILURE, REMOVE_POST_SUCCESS,\r\n  LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction loadPostsAPI(data) {\r\n  return axios.get('/posts', data);\r\n}\r\nfunction* loadPosts(action) {\r\n  try {\r\n    const result = yield call(loadPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post('/post', { content: data });\r\n}\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\r\n}\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete('/api/remove', data);\r\n}\r\nfunction* removePost(action) {\r\n  try {\r\n    yield delay(1000);\r\n    //  const result = yield call(addpostAPI,action.data)\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nfunction* watchremovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nfunction* watchLoadPosts() {\r\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nexport default function* postSage() {\r\n  yield all([\r\n    fork(watchUnlikePost),\r\n    fork(watchLikePost),\r\n    fork(watchAddPost),\r\n    fork(watchAddComment),\r\n    fork(watchremovePost),\r\n    fork(watchLoadPosts),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}