{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _initialState;\n\n/* eslint-disable indent */\nimport shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nimport { number } from 'prop-types';\nexport var initialState = (_initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  postAdded: false,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null\n}, _defineProperty(_initialState, \"postAdded\", false), _defineProperty(_initialState, \"addPostLoading\", false), _defineProperty(_initialState, \"addPostDone\", false), _defineProperty(_initialState, \"addPostError\", null), _defineProperty(_initialState, \"addCommentLoading\", false), _defineProperty(_initialState, \"addCommentDone\", false), _defineProperty(_initialState, \"addCommentError\", null), _defineProperty(_initialState, \"removePostLoading\", false), _defineProperty(_initialState, \"removePostDone\", false), _defineProperty(_initialState, \"removePostError\", null), _initialState);\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(number).fill().map(function () {\n    return {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{\n        src: faker.image.image()\n      }],\n      Comments: [{\n        User: {\n          id: shortId.generate(),\n          nickname: faker.name.findName()\n        },\n        content: faker.lorem.sentence()\n      }]\n    };\n  });\n};\nconsole.log(initialState.mainPosts.length, 'aabaaaaaaaaaaaaaaaaaaaaaaaaaa');\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    }\n  };\n}; // 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\n\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.postId;\n          });\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // console.log(postIndex, state.mainPosts.length);\n          // const post = { ...state.mainPosts[postIndex] };\n          // console.log(post);\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // console.log(mainPosts);\n          // mainPosts[postIndex] = post;\n          //  return {\n          //               ...state,\n          //               mainPosts,\n          //               addCommentLoading: false,\n          //               addCommentDone: true,\n          //           };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        draft.removePostLoading = false;\n        draft.removePostError = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/SangHo/Desktop/inflearn/react-nodebird/front/reducers/post.js"],"names":["shortId","produce","faker","number","initialState","mainPosts","imagePaths","postAdded","loadPostLoading","loadPostDone","loadPostError","generateDummyPost","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","console","log","length","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","addPostLoading","addPostDone","addPostError","unshift","error","addCommentLoading","addCommentDone","addCommentError","post","find","v","postId","removePostLoading","removePostDone","removePostError","filter"],"mappings":"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","sourcesContent":["/* eslint-disable indent */\r\nimport shortId from 'shortid';\r\nimport produce from 'immer';\r\nimport faker from 'faker';\r\nimport { number } from 'prop-types';\r\n\r\nexport const initialState = {\r\n    mainPosts: [],\r\n    imagePaths: [],\r\n    postAdded: false,\r\n    loadPostLoading: false,\r\n    loadPostDone: false,\r\n    loadPostError: null,\r\n    postAdded: false,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n\r\n};\r\n\r\nexport const generateDummyPost = (number) =>  Array(number).fill().map(() => ({\r\n  id: shortId.generate(),\r\n  User: {\r\n    id: shortId.generate(),\r\n    nickname: faker.name.findName(),\r\n  },\r\n  content: faker.lorem.paragraph(),\r\n  Images: [{\r\n    src: faker.image.image(),\r\n  }],\r\n  Comments: [{\r\n    User: {\r\n      id: shortId.generate(),\r\n      nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.sentence(),\r\n  }],\r\n}));\r\n\r\nconsole.log(initialState.mainPosts.length, 'aabaaaaaaaaaaaaaaaaaaaaaaaaaa');\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: '제로초',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: '제로초',\r\n  },\r\n});\r\n\r\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n        \r\n      case ADD_POST_SUCCESS:\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        draft.mainPosts.unshift(dummyPost(action.data));\r\n        break;\r\n  \r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      \r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n      \r\n      case ADD_COMMENT_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n        post.Comments.unshift(dummyComment(action.data.content));\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentDone = true;\r\n        break;\r\n        // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n        // console.log(postIndex, state.mainPosts.length);\r\n        // const post = { ...state.mainPosts[postIndex] };\r\n        // console.log(post);\r\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n        // const mainPosts = [...state.mainPosts];\r\n        // console.log(mainPosts);\r\n        // mainPosts[postIndex] = post;\r\n        //  return {\r\n        //               ...state,\r\n        //               mainPosts,\r\n        //               addCommentLoading: false,\r\n        //               addCommentDone: true,\r\n        //           };\r\n              }\r\n      case ADD_COMMENT_FAILURE:\r\n          draft.addCommentLoading = false;\r\n          draft.addCommentError = action.error;\r\n        break;\r\n        case REMOVE_POST_REQUEST:\r\n          draft.removePostLoading = true;\r\n          draft.removePostDone = false;\r\n          draft.removePostError = null;\r\n        break;\r\n  \r\n        case REMOVE_POST_SUCCESS:\r\n          draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n          draft.removePostLoading = false;\r\n          draft.removePostError = true;\r\n        break;\r\n         \r\n        case REMOVE_POST_FAILURE:\r\n          draft.removePostLoading = false;\r\n          draft.removePostError = action.error;\r\n         break;\r\n      default:\r\n       break;\r\n    }\r\n  });\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}