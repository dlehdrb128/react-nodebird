{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(postSage);\n\nimport { all, put, delay, fork, takeLatest } from \"@redux-saga/core/effects\";\nimport axios from 'axios';\nimport { ADD_POST_FAILURE, ADD_POST_SUCCESS, ADD_POST_REQUEST, ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS, ADD_COMMENT_REQUEST } from '../reducers/post';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: ADD_POST_REQUEST\n          });\n\n        case 5:\n          _context.next = 7;\n          return put({\n            type: ADD_POST_SUCCESS //  data:result.data\n\n          });\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 13;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/post/\".concat(data.postId, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: ADD_COMMENT_REQUEST\n          });\n\n        case 5:\n          _context2.next = 7;\n          return put({\n            type: ADD_COMMENT_SUCCESS //  data:result.data\n\n          });\n\n        case 7:\n          _context2.next = 13;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context2.t0.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 9]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function postSage() {\n  return _regeneratorRuntime.wrap(function postSage$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/SangHo/Desktop/inflearn/react-nodebird/front/sagas/post.js"],"names":["addPost","addComment","watchAddPost","watchAddComment","postSage","all","put","delay","fork","takeLatest","axios","ADD_POST_FAILURE","ADD_POST_SUCCESS","ADD_POST_REQUEST","ADD_COMMENT_FAILURE","ADD_COMMENT_SUCCESS","ADD_COMMENT_REQUEST","addPostAPI","data","post","action","type","addCommentAPI","postId"],"mappings":";;oDAYYA,O;qDAsBAC,U;qDAmBFC,Y;qDAMAC,e;qDAGeC,Q;;AA9DzB,SAASC,GAAT,EAAcC,GAAd,EAAmBC,KAAnB,EAA0BC,IAA1B,EAAgCC,UAAhC,QAAkD,0BAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAAQC,gBAAR,EAA0BC,gBAA1B,EAA4CC,gBAA5C,EACQC,mBADR,EAC6BC,mBAD7B,EACmDC,mBADnD,QAEO,kBAFP;;AAMA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtB,SAAOR,KAAK,CAACS,IAAN,CAAW,WAAX,EAAuBD,IAAvB,CAAP;AACD;;AACD,SAAUlB,OAAV,CAAkBoB,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMb,KAAK,CAAC,IAAD,CAAX;;AAFR;AAAA;AAGQ,iBAAMD,GAAG,CAAC;AACNe,YAAAA,IAAI,EAACR;AADC,WAAD,CAAT;;AAHR;AAAA;AAOG,iBAAMP,GAAG,CAAC;AACNe,YAAAA,IAAI,EAACT,gBADC,CAEP;;AAFO,WAAD,CAAT;;AAPH;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAYO,iBAAMN,GAAG,CAAC;AACNe,YAAAA,IAAI,EAACV,gBADC;AAENO,YAAAA,IAAI,EAAC,YAAIA;AAFH,WAAD,CAAT;;AAZP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBA,SAASI,aAAT,CAAuBJ,IAAvB,EAA6B;AAC3B,SAAOR,KAAK,CAACS,IAAN,qBAAwBD,IAAI,CAACK,MAA7B,eAA8CL,IAA9C,CAAP;AACD;;AACD,SAAUjB,UAAV,CAAqBmB,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMb,KAAK,CAAC,IAAD,CAAX;;AAFR;AAAA;AAGQ,iBAAMD,GAAG,CAAC;AACNe,YAAAA,IAAI,EAACL;AADC,WAAD,CAAT;;AAHR;AAAA;AAOG,iBAAMV,GAAG,CAAC;AACAe,YAAAA,IAAI,EAACN,mBADL,CAEP;;AAFO,WAAD,CAAT;;AAPH;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAYO,iBAAMT,GAAG,CAAC;AACNe,YAAAA,IAAI,EAACP,mBADC;AAENI,YAAAA,IAAI,EAAC,aAAIA;AAFH,WAAD,CAAT;;AAZP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBF,SAAUhB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,UAAU,CAACI,gBAAD,EAAmBb,OAAnB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,SAAUG,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAACO,mBAAD,EAAsBf,UAAtB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNG,IAAI,CAACN,YAAD,CADE,EAENM,IAAI,CAACL,eAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, put, delay, fork, takeLatest } from \"@redux-saga/core/effects\";\r\nimport axios from 'axios'\r\n\r\nimport {ADD_POST_FAILURE, ADD_POST_SUCCESS, ADD_POST_REQUEST ,\r\n        ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS , ADD_COMMENT_REQUEST,\r\n} from '../reducers/post'\r\n\r\n\r\n  \r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post',data);\r\n  }\r\n  function* addPost(action) {\r\n      try {\r\n          yield delay(1000);\r\n          yield put({\r\n              type:ADD_POST_REQUEST,\r\n           });\r\n    //  const result = yield call(addpostAPI,action.data)\r\n     yield put({\r\n         type:ADD_POST_SUCCESS,\r\n        //  data:result.data\r\n      });\r\n     } catch (err) {\r\n         yield put({\r\n             type:ADD_POST_FAILURE,\r\n             data:err.data\r\n         })\r\n     }\r\n  }\r\n\r\n  function addCommentAPI(data) {\r\n    return axios.post(`/api/post/${data.postId}/comment`,data)\r\n  }\r\n  function* addComment(action) {\r\n      try {\r\n          yield delay(1000);\r\n          yield put({\r\n              type:ADD_COMMENT_REQUEST,\r\n           });\r\n    //  const result = yield call(addpostAPI,action.data)\r\n     yield put({\r\n               type:ADD_COMMENT_SUCCESS,\r\n        //  data:result.data\r\n      });\r\n     } catch (err) {\r\n         yield put({\r\n             type:ADD_COMMENT_FAILURE,\r\n             data:err.data\r\n         })\r\n     }\r\n  }\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost)\r\n}\r\n\r\n\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment)\r\n}\r\nexport default function* postSage() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}