{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(postSage);\n\nimport { all, put, delay, fork, takeLatest } from \"@redux-saga/core/effects\";\nimport axios from 'axios';\nimport shortid from \"shortid\";\nimport { ADD_POST_FAILURE, ADD_POST_SUCCESS, ADD_POST_REQUEST, ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS, ADD_COMMENT_REQUEST } from '../reducers/post';\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          id = shortid.generate(); //  const result = yield call(addpostAPI,action.data)\n\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/post/\".concat(data.postId, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context2.t0.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function postSage() {\n  return _regeneratorRuntime.wrap(function postSage$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/SangHo/Desktop/inflearn/react-nodebird/front/sagas/post.js"],"names":["addPost","addComment","watchAddPost","watchAddComment","postSage","all","put","delay","fork","takeLatest","axios","shortid","ADD_POST_FAILURE","ADD_POST_SUCCESS","ADD_POST_REQUEST","ADD_COMMENT_FAILURE","ADD_COMMENT_SUCCESS","ADD_COMMENT_REQUEST","ADD_POST_TO_ME","addPostAPI","data","post","action","id","generate","type","content","addCommentAPI","postId"],"mappings":";;oDAcYA,O;qDA4BAC,U;qDAgBFC,Y;qDAIAC,e;qDAGeC,Q;;AAjEzB,SAASC,GAAT,EAAcC,GAAd,EAAmBC,KAAnB,EAA0BC,IAA1B,EAAgCC,UAAhC,QAAkD,0BAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,SAApB;AAEA,SAAQC,gBAAR,EAA0BC,gBAA1B,EAA4CC,gBAA5C,EACQC,mBADR,EAC6BC,mBAD7B,EACmDC,mBADnD,QAEO,kBAFP;AAGA,SAASC,cAAT,QAA+B,kBAA/B;;AAIA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtB,SAAOV,KAAK,CAACW,IAAN,CAAW,WAAX,EAAuBD,IAAvB,CAAP;AACD;;AACD,SAAUpB,OAAV,CAAkBsB,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMf,KAAK,CAAC,IAAD,CAAX;;AAHR;AAIcgB,UAAAA,EAJd,GAImBZ,OAAO,CAACa,QAAR,EAJnB,EAKE;;AALF;AAMG,iBAAMlB,GAAG,CAAC;AACNmB,YAAAA,IAAI,EAACZ,gBADC;AAENO,YAAAA,IAAI,EAAE;AACNG,cAAAA,EAAE,EAAFA,EADM;AAENG,cAAAA,OAAO,EAACJ,MAAM,CAACF;AAFT;AAFA,WAAD,CAAT;;AANH;AAAA;AAaI,iBAAMd,GAAG,CAAC;AACNmB,YAAAA,IAAI,EAAEP,cADA;AAENE,YAAAA,IAAI,EAAEG;AAFA,WAAD,CAAT;;AAbJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAkBO,iBAAMjB,GAAG,CAAC;AACNmB,YAAAA,IAAI,EAACb,gBADC;AAENQ,YAAAA,IAAI,EAAC,YAAIA;AAFH,WAAD,CAAT;;AAlBP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyBA,SAASO,aAAT,CAAuBP,IAAvB,EAA6B;AAC3B,SAAOV,KAAK,CAACW,IAAN,qBAAwBD,IAAI,CAACQ,MAA7B,eAA+CR,IAA/C,CAAP;AACD;;AACD,SAAUnB,UAAV,CAAqBqB,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMf,KAAK,CAAC,IAAD,CAAX;;AAFR;AAAA;AAIG,iBAAMD,GAAG,CAAC;AACAmB,YAAAA,IAAI,EAAET,mBADN;AAEAI,YAAAA,IAAI,EAAEE,MAAM,CAACF;AAFb,WAAD,CAAT;;AAJH;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASO,iBAAMd,GAAG,CAAC;AACNmB,YAAAA,IAAI,EAAEV,mBADA;AAENK,YAAAA,IAAI,EAAE,aAAIA;AAFJ,WAAD,CAAT;;AATP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBF,SAAUlB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,UAAU,CAACK,gBAAD,EAAmBd,OAAnB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUG,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAACQ,mBAAD,EAAsBhB,UAAtB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNG,IAAI,CAACN,YAAD,CADE,EAENM,IAAI,CAACL,eAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, put, delay, fork, takeLatest } from \"@redux-saga/core/effects\";\r\nimport axios from 'axios'\r\nimport shortid from \"shortid\";\r\n\r\nimport {ADD_POST_FAILURE, ADD_POST_SUCCESS, ADD_POST_REQUEST ,\r\n        ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS , ADD_COMMENT_REQUEST,\r\n} from '../reducers/post'\r\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\r\n\r\n\r\n  \r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post',data);\r\n  }\r\n  function* addPost(action) {\r\n      try {\r\n          \r\n          yield delay(1000);\r\n          const id = shortid.generate();\r\n    //  const result = yield call(addpostAPI,action.data)\r\n     yield put({\r\n         type:ADD_POST_SUCCESS,\r\n         data: {\r\n         id,\r\n         content:action.data,\r\n         }\r\n      });\r\n      yield put({\r\n          type: ADD_POST_TO_ME,\r\n          data: id,\r\n      });\r\n     } catch (err) {\r\n         yield put({\r\n             type:ADD_POST_FAILURE,\r\n             data:err.data\r\n    })\r\n  }\r\n}\r\n\r\n  function addCommentAPI(data) {\r\n    return axios.post(`/api/post/${data.postId}/comment`, data);\r\n  }\r\n  function* addComment(action) {\r\n      try {\r\n          yield delay(1000);\r\n    //  const result = yield call(addpostAPI,action.data)\r\n     yield put({\r\n               type: ADD_COMMENT_SUCCESS,\r\n               data: action.data,\r\n      });\r\n     } catch (err) {\r\n         yield put({\r\n             type: ADD_COMMENT_FAILURE,\r\n             data: err.data\r\n         })\r\n     }\r\n  }\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost)\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment)\r\n}\r\nexport default function* postSage() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}