{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, put, delay, takeLatest } from \"@redux-saga/core/effects\";\nimport axios from 'axios';\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: 'LOG_IN_SUCCESS' //    data:result.data\n\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: 'LOG_IN_FAILURE',\n            data: _context.t0.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: 'LOG_OUT_REQUEST'\n          });\n\n        case 5:\n          _context2.next = 7;\n          return put({\n            type: 'LOG_OUT_SUCCESS' //  data:result.data\n\n          });\n\n        case 7:\n          _context2.next = 13;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 13;\n          return put({\n            type: 'LOG_OUT_FAILURE',\n            data: _context2.t0.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 9]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest('LOG_IN_REQUEST', logIn);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest('LOG_OUT_REQUEST', logOut);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogin), fork(watchLogOut)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/SangHo/Desktop/inflearn/react-nodebird/front/sagas/user.js"],"names":["logIn","logOut","watchLogin","watchLogOut","userSaga","all","fork","put","delay","takeLatest","axios","logInAPI","data","post","action","type","logOutAPI"],"mappings":";;oDAOYA,K;qDAoBEC,M;qDAsBJC,U;qDAGAC,W;qDAIeC,Q;;AAxDzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,KAAzB,EAAgCC,UAAhC,QAAkD,0BAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACD;;AAED,SAAUZ,KAAV,CAAgBc,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGG,iBAAMN,KAAK,CAAC,IAAD,CAAX;;AAHH;AAAA;AAIG,iBAAMD,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAC,gBADC,CAET;;AAFS,WAAD,CAAT;;AAJH;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASO,iBAAMR,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAC,gBADC;AAENH,YAAAA,IAAI,EAAC,YAAIA;AAFH,WAAD,CAAT;;AATP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAASI,SAAT,GAAqB;AACjB,SAAON,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,SAAUZ,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMO,KAAK,CAAC,IAAD,CAAX;;AAFR;AAAA;AAGQ,iBAAMD,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAC;AADC,WAAD,CAAT;;AAHR;AAAA;AAOG,iBAAMR,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAC,iBADC,CAEP;;AAFO,WAAD,CAAT;;AAPH;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAYO,iBAAMR,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAC,iBADC;AAENH,YAAAA,IAAI,EAAC,aAAIA;AAFH,WAAD,CAAT;;AAZP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsBJ,SAAUV,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,UAAU,CAAC,gBAAD,EAAmBT,KAAnB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAAC,iBAAD,EAAmBR,MAAnB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACTC,IAAI,CAACJ,UAAD,CADK,EAETI,IAAI,CAACH,WAAD,CAFK,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, put, delay, takeLatest } from \"@redux-saga/core/effects\";\r\nimport axios from 'axios'\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post('/api/login', data)\r\n  } \r\n  \r\n  function* logIn(action) {    // 일로 들어옴\r\n      try {\r\n  //    const result = yield call(logInAPI,action.data) //첫번쨰 자리는 함수고 나머지는 인수들 \r\n     yield delay(1000);\r\n     yield put({\r\n         type:'LOG_IN_SUCCESS',\r\n      //    data:result.data\r\n      });\r\n     } catch (err) {\r\n         yield put({\r\n             type:'LOG_IN_FAILURE',\r\n             data:err.data\r\n         })\r\n     }\r\n  }\r\n  \r\n  function logOutAPI() {\r\n      return axios.post('/api/logout')\r\n    }\r\n\r\n    function* logOut() {\r\n        try {\r\n            yield delay(1000);\r\n            yield put({\r\n                type:'LOG_OUT_REQUEST',\r\n             });\r\n      //  const result = yield call(logOutAPI)\r\n       yield put({\r\n           type:'LOG_OUT_SUCCESS',\r\n          //  data:result.data\r\n        });\r\n       } catch (err) {\r\n           yield put({\r\n               type:'LOG_OUT_FAILURE',\r\n               data:err.data\r\n           })\r\n       }\r\n    }\r\n  \r\n\r\n\r\n\r\nfunction* watchLogin() {\r\n    yield takeLatest('LOG_IN_REQUEST', logIn);\r\n}\r\nfunction* watchLogOut() {\r\n    yield takeLatest('LOG_OUT_REQUEST',logOut)\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n     fork(watchLogin),\r\n     fork(watchLogOut),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}