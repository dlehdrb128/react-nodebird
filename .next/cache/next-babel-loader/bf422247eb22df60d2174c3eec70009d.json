{"ast":null,"code":"/* eslint-disable indent */\nimport produce from 'immer';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  postAdded: false,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n}; // export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//   id: shortId.generate(),\n//   User: {\n//     id: shortId.generate(),\n//     nickname: faker.name.findName(),\n//   },\n//   content: faker.lorem.paragraph(),\n//   Images: [{\n//     src: faker.image.image(),\n//   }],\n//   Comments: [{\n//     User: {\n//       id: shortId.generate(),\n//       nickname: faker.name.findName(),\n//     },\n//     content: faker.lorem.sentence(),\n//   }],\n// }));\n// console.log(initialState.mainPosts.length, 'aabaaaaaaaaaaaaaaaaaaaaaaaaaa');\n\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n}); // 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case REMOVE_IMAGE:\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n      break;\n\n    case RETWEET_REQUEST:\n      draft.retweetLoading = true;\n      draft.retweetDone = false;\n      draft.retweetError = null;\n      break;\n\n    case RETWEET_SUCCESS:\n      {\n        draft.retweetLoading = false;\n        draft.retweetDone = true;\n        draft.mainPosts.unshift(action.data);\n        break;\n      }\n\n    case RETWEET_FAILURE:\n      draft.retweetLoading = false;\n      draft.retweetError = action.error;\n      break;\n\n    case LIKE_POST_REQUEST:\n      draft.likePostLoading = true;\n      draft.likePostDone = false;\n      draft.likePostError = null;\n      break;\n\n    case LIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers.push({\n          id: action.data.UserId\n        });\n        draft.likePostLoading = false;\n        draft.likePostDone = true;\n        break;\n      }\n\n    case LIKE_POST_FAILURE:\n      draft.likePostLoading = false;\n      draft.likePostError = action.error;\n      break;\n\n    case UNLIKE_POST_REQUEST:\n      draft.unlikePostLoading = true;\n      draft.unlikePostDone = false;\n      draft.unlikePostError = null;\n      break;\n\n    case UNLIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n        draft.unlikePostLoading = false;\n        draft.unlikePostDone = true;\n        break;\n      }\n\n    case UNLIKE_POST_FAILURE:\n      draft.unlikePostLoading = false;\n      draft.unlikePostError = action.error;\n      break;\n\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = action.data.concat(draft.data);\n      draft.hasMorePost = draft.data.length === 10;\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(action.data);\n      draft.imagePaths = [];\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        // console.log(postIndex, state.mainPosts.length);\n        // const post = { ...state.mainPosts[postIndex] };\n        // console.log(post);\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // console.log(mainPosts);\n        // mainPosts[postIndex] = post;\n        //  return {\n        //               ...state,\n        //               mainPosts,\n        //               addCommentLoading: false,\n        //               addCommentDone: true,\n        //           };\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n      draft.removePostLoading = false;\n      draft.removePostError = true;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/SangHo/Desktop/inflearn/react-nodebird/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","hasMorePost","postAdded","loadPostsLoading","loadPostsDone","loadPostsError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_IMAGE","addPost","data","type","addComment","reducer","state","action","draft","filter","v","i","unshift","error","post","find","id","PostId","Likers","push","UserId","concat","length","Comments"],"mappings":"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","sourcesContent":["/* eslint-disable indent */\r\nimport produce from 'immer';\r\n\r\nexport const initialState = {\r\n    mainPosts: [],\r\n    imagePaths: [],\r\n    hasMorePost: true,\r\n    postAdded: false,\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError: null,\r\n    likePostLoading: false,\r\n    likePostDone: false,\r\n    likePostError: null,\r\n    unlikePostLoading: false,\r\n    unlikePostDone: false,\r\n    unlikePostError: null,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    uploadImagesLoading: false,\r\n    uploadImagesDone: false,\r\n    uploadImagesError: null,\r\n    retweetLoading: false,\r\n    retweetDone: false,\r\n    retweetError: null,\r\n\r\n};\r\n\r\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n//   id: shortId.generate(),\r\n//   User: {\r\n//     id: shortId.generate(),\r\n//     nickname: faker.name.findName(),\r\n//   },\r\n//   content: faker.lorem.paragraph(),\r\n//   Images: [{\r\n//     src: faker.image.image(),\r\n//   }],\r\n//   Comments: [{\r\n//     User: {\r\n//       id: shortId.generate(),\r\n//       nickname: faker.name.findName(),\r\n//     },\r\n//     content: faker.lorem.sentence(),\r\n//   }],\r\n// }));\r\n\r\n// console.log(initialState.mainPosts.length, 'aabaaaaaaaaaaaaaaaaaaaaaaaaaa');\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case REMOVE_IMAGE:\r\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\r\n        break;\r\n      case RETWEET_REQUEST:\r\n        draft.retweetLoading = true;\r\n        draft.retweetDone = false;\r\n        draft.retweetError = null;\r\n        break;\r\n      case RETWEET_SUCCESS: {\r\n        draft.retweetLoading = false;\r\n        draft.retweetDone = true;\r\n        draft.mainPosts.unshift(action.data);\r\n        break;\r\n      }\r\n      case RETWEET_FAILURE:\r\n        draft.retweetLoading = false;\r\n        draft.retweetError = action.error;\r\n        break;\r\n      case LIKE_POST_REQUEST:\r\n        draft.likePostLoading = true;\r\n        draft.likePostDone = false;\r\n        draft.likePostError = null;\r\n        break;\r\n      case LIKE_POST_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Likers.push({ id: action.data.UserId });\r\n        draft.likePostLoading = false;\r\n        draft.likePostDone = true;\r\n        break;\r\n      }\r\n      case LIKE_POST_FAILURE:\r\n        draft.likePostLoading = false;\r\n        draft.likePostError = action.error;\r\n        break;\r\n        case UNLIKE_POST_REQUEST:\r\n        draft.unlikePostLoading = true;\r\n        draft.unlikePostDone = false;\r\n        draft.unlikePostError = null;\r\n        break;\r\n      case UNLIKE_POST_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n        draft.unlikePostLoading = false;\r\n        draft.unlikePostDone = true;\r\n        break;\r\n      }\r\n      case UNLIKE_POST_FAILURE:\r\n        draft.unlikePostLoading = false;\r\n        draft.unlikePostError = action.error;\r\n        break;\r\n\r\n      case LOAD_POSTS_REQUEST:\r\n        draft.loadPostsLoading = true;\r\n        draft.loadPostsDone = false;\r\n        draft.loadPostsError = null;\r\n        break;\r\n      case LOAD_POSTS_SUCCESS:\r\n        draft.loadPostsLoading = false;\r\n        draft.loadPostsDone = true;\r\n        draft.mainPosts = action.data.concat(draft.data);\r\n        draft.hasMorePost = draft.data.length === 10;\r\n        break;\r\n      case LOAD_POSTS_FAILURE:\r\n        draft.loadPostsLoading = false;\r\n        draft.loadPostsError = action.error;\r\n        break;\r\n\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n        \r\n      case ADD_POST_SUCCESS:\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        draft.mainPosts.unshift(action.data);\r\n        draft.imagePaths = [];\r\n        break;\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      \r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n      \r\n      case ADD_COMMENT_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Comments.unshift(action.data);\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentDone = true;\r\n        break;\r\n        // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n        // console.log(postIndex, state.mainPosts.length);\r\n        // const post = { ...state.mainPosts[postIndex] };\r\n        // console.log(post);\r\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n        // const mainPosts = [...state.mainPosts];\r\n        // console.log(mainPosts);\r\n        // mainPosts[postIndex] = post;\r\n        //  return {\r\n        //               ...state,\r\n        //               mainPosts,\r\n        //               addCommentLoading: false,\r\n        //               addCommentDone: true,\r\n        //           };\r\n              }\r\n      case ADD_COMMENT_FAILURE:\r\n          draft.addCommentLoading = false;\r\n          draft.addCommentError = action.error;\r\n        break;\r\n        case REMOVE_POST_REQUEST:\r\n          draft.removePostLoading = true;\r\n          draft.removePostDone = false;\r\n          draft.removePostError = null;\r\n        break;\r\n  \r\n        case REMOVE_POST_SUCCESS:\r\n          draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\r\n          draft.removePostLoading = false;\r\n          draft.removePostError = true;\r\n        break;\r\n         \r\n        case REMOVE_POST_FAILURE:\r\n          draft.removePostLoading = false;\r\n          draft.removePostError = action.error;\r\n         break;\r\n      default:\r\n       break;\r\n    }\r\n  });\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}