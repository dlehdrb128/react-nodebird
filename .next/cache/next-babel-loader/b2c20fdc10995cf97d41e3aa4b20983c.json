{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addpost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchCommentPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(postSage);\n\nimport { all, put, delay, fork, takeLatest } from \"@redux-saga/core/effects\";\nimport axios from 'axios';\nimport { addComment } from \"../reducers/post\";\n\nfunction addpostAPI(data) {\n  return axios.post('/api/addpost', data);\n}\n\nfunction addpost(action) {\n  return _regeneratorRuntime.wrap(function addpost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: ADD_POST_REQUEST\n          });\n\n        case 5:\n          _context.next = 7;\n          return put({\n            type: ADD_POST_SUCCESS //  data:result.data\n\n          });\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 13;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addpost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction watchCommentPost() {\n  return _regeneratorRuntime.wrap(function watchCommentPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nexport default function postSage() {\n  return _regeneratorRuntime.wrap(function postSage$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([fork(watchAddPost), fork(watchCommentPost)]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["C:/Users/SangHo/Desktop/inflearn/react-nodebird/front/sagas/post.js"],"names":["addpost","watchAddPost","watchCommentPost","postSage","all","put","delay","fork","takeLatest","axios","addComment","addpostAPI","data","post","action","type","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST"],"mappings":";;oDASYA,O;qDAoBFC,Y;qDAMAC,gB;qDAGeC,Q;;AAtCzB,SAASC,GAAT,EAAaC,GAAb,EAAiBC,KAAjB,EAAwBC,IAAxB,EAA6BC,UAA7B,QAA+C,0BAA/C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAIA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtB,SAAOH,KAAK,CAACI,IAAN,CAAW,cAAX,EAA0BD,IAA1B,CAAP;AACD;;AACD,SAAUZ,OAAV,CAAkBc,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMR,KAAK,CAAC,IAAD,CAAX;;AAFR;AAAA;AAGQ,iBAAMD,GAAG,CAAC;AACNU,YAAAA,IAAI,EAACC;AADC,WAAD,CAAT;;AAHR;AAAA;AAOG,iBAAMX,GAAG,CAAC;AACNU,YAAAA,IAAI,EAACE,gBADC,CAEP;;AAFO,WAAD,CAAT;;AAPH;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAYO,iBAAMZ,GAAG,CAAC;AACNU,YAAAA,IAAI,EAACG,gBADC;AAENN,YAAAA,IAAI,EAAC,YAAIA;AAFH,WAAD,CAAT;;AAZP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBF,SAAUX,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,UAAU,CAACQ,gBAAD,EAAmBhB,OAAnB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,SAAUE,gBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAACW,mBAAD,EAAsBT,UAAtB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,eAAe,SAAUP,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNG,IAAI,CAACN,YAAD,CADE,EAENM,IAAI,CAACL,gBAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all,put,delay, fork,takeLatest } from \"@redux-saga/core/effects\";\r\nimport axios from 'axios'\r\nimport { addComment } from \"../reducers/post\";\r\n\r\n\r\n  \r\nfunction addpostAPI(data) {\r\n    return axios.post('/api/addpost',data)\r\n  }\r\n  function* addpost(action) {\r\n      try {\r\n          yield delay(1000);\r\n          yield put({\r\n              type:ADD_POST_REQUEST,\r\n           });\r\n    //  const result = yield call(addpostAPI,action.data)\r\n     yield put({\r\n         type:ADD_POST_SUCCESS,\r\n        //  data:result.data\r\n      });\r\n     } catch (err) {\r\n         yield put({\r\n             type:ADD_POST_FAILURE,\r\n             data:err.data\r\n         })\r\n     }\r\n  }\r\n\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addpost)\r\n}\r\n\r\n\r\n\r\nfunction* watchCommentPost() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment)\r\n}\r\nexport default function* postSage() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchCommentPost),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}