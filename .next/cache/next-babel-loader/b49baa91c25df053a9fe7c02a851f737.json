{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nconst initialState = {\n  user: {\n    isLoggedIn: false,\n    user: null,\n    signUpData: {},\n    loginData: {}\n  },\n  post: {\n    mainPosts: []\n  }\n};\nexport const loginAction = data => {\n  return {\n    type: 'LOG_IN',\n    data\n  };\n};\nexport const logoutAction = () => {\n  return {\n    type: 'LOG_OUT'\n  };\n}; // async action creator\n// action creators\n// const changeNickname = {\n//     type: 'CHANGE_NICKNAME',\n//     data:'boogicho',\n// }\n// (이전살태, 액션) => 다음상태\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case 'LOG_IN':\n      return {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: true,\n          user: action.data\n        })\n      };\n\n    case 'LOG_OUT':\n      return {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: false,\n          user: null\n        })\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/SangHo/Desktop/inflearn/react-nodebird/front/reducers/index.js"],"names":["HYDRATE","initialState","user","isLoggedIn","signUpData","loginData","post","mainPosts","loginAction","data","type","logoutAction","rootReducer","state","action","payload"],"mappings":";;;;;;AAAA,SAAQA,OAAR,QAAsB,oBAAtB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,UAAU,EAAC,KADT;AAEFD,IAAAA,IAAI,EAAC,IAFH;AAGFE,IAAAA,UAAU,EAAC,EAHT;AAIFC,IAAAA,SAAS,EAAC;AAJR,GADW;AAOjBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,SAAS,EAAC;AADR;AAPW,CAArB;AAYA,OAAO,MAAMC,WAAW,GAAIC,IAAD,IAAU;AACjC,SAAO;AACHC,IAAAA,IAAI,EAAC,QADF;AAEHD,IAAAA;AAFG,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,YAAY,GAAG,MAAM;AAC9B,SAAO;AACHD,IAAAA,IAAI,EAAC;AADF,GAAP;AAGH,CAJM,C,CAKP;AACA;AAEA;AACA;AACA;AACA;AAIA;;AACA,MAAME,WAAW,GAAG,CAACC,KAAK,GAAGZ,YAAT,EAAuBa,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACJ,IAAf;AACI,SAAKV,OAAL;AACI,6CAAWa,KAAX,GAAqBC,MAAM,CAACC,OAA5B;;AACJ,SAAK,QAAL;AACI,aAAO;AAEHb,QAAAA,IAAI,kCACGW,KAAK,CAACX,IADT;AAEAC,UAAAA,UAAU,EAAC,IAFX;AAGAD,UAAAA,IAAI,EAACY,MAAM,CAACL;AAHZ;AAFD,OAAP;;AAQA,SAAK,SAAL;AACI,aAAO;AAEHP,QAAAA,IAAI,kCACGW,KAAK,CAACX,IADT;AAEAC,UAAAA,UAAU,EAAC,KAFX;AAGAD,UAAAA,IAAI,EAAC;AAHL;AAFD,OAAP;;AAQR;AACI,aAAOW,KAAP;AAtBR;AAwBH,CAzBD;;AA2BA,eAAeD,WAAf","sourcesContent":["import {HYDRATE} from 'next-redux-wrapper';\r\n\r\nconst initialState = {\r\n    user: {\r\n        isLoggedIn:false,\r\n        user:null,\r\n        signUpData:{},\r\n        loginData:{},\r\n    },\r\n    post: {\r\n        mainPosts:[],\r\n\r\n    }\r\n}\r\nexport const loginAction = (data) => {\r\n    return {\r\n        type:'LOG_IN',\r\n        data,\r\n    }\r\n}\r\n\r\nexport const logoutAction = () => {\r\n    return {\r\n        type:'LOG_OUT',\r\n    }\r\n}\r\n// async action creator\r\n// action creators\r\n\r\n// const changeNickname = {\r\n//     type: 'CHANGE_NICKNAME',\r\n//     data:'boogicho',\r\n// }\r\n\r\n\r\n\r\n// (이전살태, 액션) => 다음상태\r\nconst rootReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case HYDRATE:\r\n            return {...state, ...action.payload};\r\n        case 'LOG_IN':\r\n            return {\r\n               \r\n                user:{\r\n                    ...state.user,\r\n                    isLoggedIn:true,\r\n                    user:action.data,\r\n                },\r\n            }\r\n            case 'LOG_OUT':\r\n                return {\r\n                   \r\n                    user:{\r\n                        ...state.user,\r\n                        isLoggedIn:false,\r\n                        user:null,\r\n                    },\r\n                };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default rootReducer"]},"metadata":{},"sourceType":"module"}