{"ast":null,"code":"import { all, put, delay, fork, takeLatest } from \"@redux-saga/core/effects\";\nimport axios from 'axios';\nimport shortid from 'shortid';\nimport { ADD_POST_FAILURE, ADD_POST_SUCCESS, ADD_POST_REQUEST, ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS, ADD_COMMENT_REQUEST, REMOVE_POST_REQUEST, REMOVE_POST_FAILURE, REMOVE_POST_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    const id = shortid.generate(); //  const result = yield call(addpostAPI,action.data)\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000); //  const result = yield call(addpostAPI,action.data)\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/remove', data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000); //  const result = yield call(addpostAPI,action.data)\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchremovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nexport default function* postSage() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchremovePost)]);\n}","map":{"version":3,"sources":["C:/Users/SangHo/Desktop/inflearn/react-nodebird/front/sagas/post.js"],"names":["all","put","delay","fork","takeLatest","axios","shortid","ADD_POST_FAILURE","ADD_POST_SUCCESS","ADD_POST_REQUEST","ADD_COMMENT_FAILURE","ADD_COMMENT_SUCCESS","ADD_COMMENT_REQUEST","REMOVE_POST_REQUEST","REMOVE_POST_FAILURE","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","addPost","action","id","generate","type","content","err","addCommentAPI","postId","addComment","removePostAPI","delete","removePost","watchAddPost","watchAddComment","watchremovePost","postSage"],"mappings":"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","sourcesContent":["import { all, put, delay, fork, takeLatest } from \"@redux-saga/core/effects\";\r\nimport axios from 'axios'\r\nimport shortid from 'shortid';\r\n\r\nimport {ADD_POST_FAILURE, ADD_POST_SUCCESS, ADD_POST_REQUEST,\r\n  ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS, ADD_COMMENT_REQUEST,\r\n  REMOVE_POST_REQUEST, REMOVE_POST_FAILURE, REMOVE_POST_SUCCESS,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post('/api/post', data);\r\n}\r\nfunction* addPost(action) {\r\n  try {\r\n    yield delay(1000);\r\n    const id = shortid.generate();\r\n    //  const result = yield call(addpostAPI,action.data)\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\nfunction* addComment(action) {\r\n  try {\r\n    yield delay(1000);\r\n    //  const result = yield call(addpostAPI,action.data)\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.data,\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.delete('/api/remove', data);\r\n  }\r\n  function* removePost(action) {\r\n    try {\r\n      yield delay(1000);\r\n      //  const result = yield call(addpostAPI,action.data)\r\n      yield put({\r\n        type: REMOVE_POST_SUCCESS,\r\n        data: action.data,\r\n      });\r\n      yield put({\r\n        type: REMOVE_POST_OF_ME,\r\n        data: action.data,\r\n      });\r\n    } catch (err) {\r\n      yield put({\r\n        type: REMOVE_POST_FAILURE,\r\n        data: err.data,\r\n      });\r\n    }\r\n  }\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nfunction* watchremovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nexport default function* postSage() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchAddComment),\r\n    fork(watchremovePost),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}