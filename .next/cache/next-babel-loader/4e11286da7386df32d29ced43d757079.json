{"ast":null,"code":"/* eslint-disable indent */\nimport produce from 'immer';\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  postAdded: false,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n}; // export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//   id: shortId.generate(),\n//   User: {\n//     id: shortId.generate(),\n//     nickname: faker.name.findName(),\n//   },\n//   content: faker.lorem.paragraph(),\n//   Images: [{\n//     src: faker.image.image(),\n//   }],\n//   Comments: [{\n//     User: {\n//       id: shortId.generate(),\n//       nickname: faker.name.findName(),\n//     },\n//     content: faker.lorem.sentence(),\n//   }],\n// }));\n// console.log(initialState.mainPosts.length, 'aabaaaaaaaaaaaaaaaaaaaaaaaaaa');\n\nexport var LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport var LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport var LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport var UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport var UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport var UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport var LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport var LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport var LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport var UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport var UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport var UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport var RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport var RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport var REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n}; // 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter(function (v, i) {\n          return i !== action.data;\n        });\n        break;\n\n      case RETWEET_REQUEST:\n        draft.retweetLoading = true;\n        draft.retweetDone = false;\n        draft.retweetError = null;\n        break;\n\n      case RETWEET_SUCCESS:\n        {\n          draft.retweetLoading = false;\n          draft.retweetDone = true;\n          draft.mainPosts.unshift(action.data);\n          break;\n        }\n\n      case RETWEET_FAILURE:\n        draft.retweetLoading = false;\n        draft.retweetError = action.error;\n        break;\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          var _post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post.Likers = _post.Likers.filter(function (v) {\n            return v.id !== action.data.UserId;\n          });\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.singlePost = action.data;\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.hasMorePost = action.data.length === 10;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        draft.imagePaths = [];\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var _post2 = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post2.Comments.unshift(action.data);\n\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // console.log(postIndex, state.mainPosts.length);\n          // const post = { ...state.mainPosts[postIndex] };\n          // console.log(post);\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // console.log(mainPosts);\n          // mainPosts[postIndex] = post;\n          //  return {\n          //               ...state,\n          //               mainPosts,\n          //               addCommentLoading: false,\n          //               addCommentDone: true,\n          //           };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data.PostId;\n        });\n        draft.removePostLoading = false;\n        draft.removePostError = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/SangHo/Desktop/inflearn/react-nodebird/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","hasMorePost","postAdded","loadPostLoading","loadPostDone","loadPostError","loadPostsLoading","loadPostsDone","loadPostsError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_IMAGE","addPost","data","type","addComment","reducer","state","action","draft","filter","v","i","unshift","error","post","find","id","PostId","Likers","push","UserId","singlePost","concat","length","Comments"],"mappings":"AAAA;AACA,OAAOA,OAAP,MAAoB,OAApB;AAEA,OAAO,IAAMC,YAAY,GAAG;AACxBC,EAAAA,SAAS,EAAE,EADa;AAExBC,EAAAA,UAAU,EAAE,EAFY;AAGxBC,EAAAA,WAAW,EAAE,IAHW;AAIxBC,EAAAA,SAAS,EAAE,KAJa;AAKxBC,EAAAA,eAAe,EAAE,KALO;AAMxBC,EAAAA,YAAY,EAAE,KANU;AAOxBC,EAAAA,aAAa,EAAE,IAPS;AAQxBC,EAAAA,gBAAgB,EAAE,KARM;AASxBC,EAAAA,aAAa,EAAE,KATS;AAUxBC,EAAAA,cAAc,EAAE,IAVQ;AAWxBC,EAAAA,eAAe,EAAE,KAXO;AAYxBC,EAAAA,YAAY,EAAE,KAZU;AAaxBC,EAAAA,aAAa,EAAE,IAbS;AAcxBC,EAAAA,iBAAiB,EAAE,KAdK;AAexBC,EAAAA,cAAc,EAAE,KAfQ;AAgBxBC,EAAAA,eAAe,EAAE,IAhBO;AAiBxBC,EAAAA,cAAc,EAAE,KAjBQ;AAkBxBC,EAAAA,WAAW,EAAE,KAlBW;AAmBxBC,EAAAA,YAAY,EAAE,IAnBU;AAoBxBC,EAAAA,iBAAiB,EAAE,KApBK;AAqBxBC,EAAAA,cAAc,EAAE,KArBQ;AAsBxBC,EAAAA,eAAe,EAAE,IAtBO;AAuBxBC,EAAAA,iBAAiB,EAAE,KAvBK;AAwBxBC,EAAAA,cAAc,EAAE,KAxBQ;AAyBxBC,EAAAA,eAAe,EAAE,IAzBO;AA0BxBC,EAAAA,mBAAmB,EAAE,KA1BG;AA2BxBC,EAAAA,gBAAgB,EAAE,KA3BM;AA4BxBC,EAAAA,iBAAiB,EAAE,IA5BK;AA6BxBC,EAAAA,cAAc,EAAE,KA7BQ;AA8BxBC,EAAAA,WAAW,EAAE,KA9BW;AA+BxBC,EAAAA,YAAY,EAAE;AA/BU,CAArB,C,CAmCP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,IAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,IAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,IAAMC,qBAAqB,GAAG,uBAA9B;AAEP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,IAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,IAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,IAAMC,kBAAkB,GAAG,oBAA3B;AAEP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AAEP,OAAO,IAAMC,YAAY,GAAG,cAArB;AAEP,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD;AAAA,SAAW;AAC9BC,IAAAA,IAAI,EAAEf,gBADwB;AAE9Bc,IAAAA,IAAI,EAAJA;AAF8B,GAAX;AAAA,CAAhB;AAKP,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACF,IAAD;AAAA,SAAW;AACjCC,IAAAA,IAAI,EAAEZ,mBAD2B;AAEjCW,IAAAA,IAAI,EAAJA;AAFiC,GAAX;AAAA,CAAnB,C,CAKP;;AACA,IAAMG,OAAO,GAAG,SAAVA,OAAU;AAAA,MAACC,KAAD,uEAASjE,YAAT;AAAA,MAAuBkE,MAAvB;AAAA,SAAkCnE,OAAO,CAACkE,KAAD,EAAQ,UAACE,KAAD,EAAW;AACxE,YAAQD,MAAM,CAACJ,IAAf;AACE,WAAKH,YAAL;AACEQ,QAAAA,KAAK,CAACjE,UAAN,GAAmBiE,KAAK,CAACjE,UAAN,CAAiBkE,MAAjB,CAAwB,UAACC,CAAD,EAAIC,CAAJ;AAAA,iBAAUA,CAAC,KAAKJ,MAAM,CAACL,IAAvB;AAAA,SAAxB,CAAnB;AACA;;AACF,WAAKL,eAAL;AACEW,QAAAA,KAAK,CAACtC,cAAN,GAAuB,IAAvB;AACAsC,QAAAA,KAAK,CAACrC,WAAN,GAAoB,KAApB;AACAqC,QAAAA,KAAK,CAACpC,YAAN,GAAqB,IAArB;AACA;;AACF,WAAK0B,eAAL;AAAsB;AACpBU,UAAAA,KAAK,CAACtC,cAAN,GAAuB,KAAvB;AACAsC,UAAAA,KAAK,CAACrC,WAAN,GAAoB,IAApB;AACAqC,UAAAA,KAAK,CAAClE,SAAN,CAAgBsE,OAAhB,CAAwBL,MAAM,CAACL,IAA/B;AACA;AACD;;AACD,WAAKH,eAAL;AACES,QAAAA,KAAK,CAACtC,cAAN,GAAuB,KAAvB;AACAsC,QAAAA,KAAK,CAACpC,YAAN,GAAqBmC,MAAM,CAACM,KAA5B;AACA;;AACF,WAAKlC,iBAAL;AACE6B,QAAAA,KAAK,CAACxD,eAAN,GAAwB,IAAxB;AACAwD,QAAAA,KAAK,CAACvD,YAAN,GAAqB,KAArB;AACAuD,QAAAA,KAAK,CAACtD,aAAN,GAAsB,IAAtB;AACA;;AACF,WAAK0B,iBAAL;AAAwB;AACtB,cAAMkC,IAAI,GAAGN,KAAK,CAAClE,SAAN,CAAgByE,IAAhB,CAAqB,UAACL,CAAD;AAAA,mBAAOA,CAAC,CAACM,EAAF,KAAST,MAAM,CAACL,IAAP,CAAYe,MAA5B;AAAA,WAArB,CAAb;AACAH,UAAAA,IAAI,CAACI,MAAL,CAAYC,IAAZ,CAAiB;AAAEH,YAAAA,EAAE,EAAET,MAAM,CAACL,IAAP,CAAYkB;AAAlB,WAAjB;AACAZ,UAAAA,KAAK,CAACxD,eAAN,GAAwB,KAAxB;AACAwD,UAAAA,KAAK,CAACvD,YAAN,GAAqB,IAArB;AACA;AACD;;AACD,WAAK4B,iBAAL;AACE2B,QAAAA,KAAK,CAACxD,eAAN,GAAwB,KAAxB;AACAwD,QAAAA,KAAK,CAACtD,aAAN,GAAsBqD,MAAM,CAACM,KAA7B;AACA;;AACA,WAAK/B,mBAAL;AACA0B,QAAAA,KAAK,CAACrD,iBAAN,GAA0B,IAA1B;AACAqD,QAAAA,KAAK,CAACpD,cAAN,GAAuB,KAAvB;AACAoD,QAAAA,KAAK,CAACnD,eAAN,GAAwB,IAAxB;AACA;;AACF,WAAK0B,mBAAL;AAA0B;AACxB,cAAM+B,KAAI,GAAGN,KAAK,CAAClE,SAAN,CAAgByE,IAAhB,CAAqB,UAACL,CAAD;AAAA,mBAAOA,CAAC,CAACM,EAAF,KAAST,MAAM,CAACL,IAAP,CAAYe,MAA5B;AAAA,WAArB,CAAb;;AACAH,UAAAA,KAAI,CAACI,MAAL,GAAcJ,KAAI,CAACI,MAAL,CAAYT,MAAZ,CAAmB,UAACC,CAAD;AAAA,mBAAOA,CAAC,CAACM,EAAF,KAAST,MAAM,CAACL,IAAP,CAAYkB,MAA5B;AAAA,WAAnB,CAAd;AACAZ,UAAAA,KAAK,CAACrD,iBAAN,GAA0B,KAA1B;AACAqD,UAAAA,KAAK,CAACpD,cAAN,GAAuB,IAAvB;AACA;AACD;;AACD,WAAK4B,mBAAL;AACEwB,QAAAA,KAAK,CAACrD,iBAAN,GAA0B,KAA1B;AACAqD,QAAAA,KAAK,CAACnD,eAAN,GAAwBkD,MAAM,CAACM,KAA/B;AACA;;AACA,WAAKxC,iBAAL;AACEmC,QAAAA,KAAK,CAAC9D,eAAN,GAAwB,IAAxB;AACA8D,QAAAA,KAAK,CAAC7D,YAAN,GAAqB,KAArB;AACA6D,QAAAA,KAAK,CAAC5D,aAAN,GAAsB,IAAtB;AACA;;AACF,WAAK0B,iBAAL;AACEkC,QAAAA,KAAK,CAAC9D,eAAN,GAAwB,KAAxB;AACA8D,QAAAA,KAAK,CAAC7D,YAAN,GAAqB,IAArB;AACA6D,QAAAA,KAAK,CAACa,UAAN,GAAmBd,MAAM,CAACL,IAA1B;AACA;;AACF,WAAK3B,iBAAL;AACEiC,QAAAA,KAAK,CAAC9D,eAAN,GAAwB,KAAxB;AACA8D,QAAAA,KAAK,CAAC5D,aAAN,GAAsB2D,MAAM,CAACM,KAA7B;AACA;;AAEJ,WAAK5B,kBAAL;AACEuB,QAAAA,KAAK,CAAC3D,gBAAN,GAAyB,IAAzB;AACA2D,QAAAA,KAAK,CAAC1D,aAAN,GAAsB,KAAtB;AACA0D,QAAAA,KAAK,CAACzD,cAAN,GAAuB,IAAvB;AACA;;AACF,WAAKmC,kBAAL;AACEsB,QAAAA,KAAK,CAAC3D,gBAAN,GAAyB,KAAzB;AACA2D,QAAAA,KAAK,CAAC1D,aAAN,GAAsB,IAAtB;AACA0D,QAAAA,KAAK,CAAClE,SAAN,GAAkBkE,KAAK,CAAClE,SAAN,CAAgBgF,MAAhB,CAAuBf,MAAM,CAACL,IAA9B,CAAlB;AACAM,QAAAA,KAAK,CAAChE,WAAN,GAAoB+D,MAAM,CAACL,IAAP,CAAYqB,MAAZ,KAAuB,EAA3C;AACA;;AACF,WAAKpC,kBAAL;AACEqB,QAAAA,KAAK,CAAC3D,gBAAN,GAAyB,KAAzB;AACA2D,QAAAA,KAAK,CAACzD,cAAN,GAAuBwD,MAAM,CAACM,KAA9B;AACA;;AAEF,WAAKzB,gBAAL;AACEoB,QAAAA,KAAK,CAAClD,cAAN,GAAuB,IAAvB;AACAkD,QAAAA,KAAK,CAACjD,WAAN,GAAoB,KAApB;AACAiD,QAAAA,KAAK,CAAChD,YAAN,GAAqB,IAArB;AACA;;AAEF,WAAK6B,gBAAL;AACEmB,QAAAA,KAAK,CAAClD,cAAN,GAAuB,KAAvB;AACAkD,QAAAA,KAAK,CAACjD,WAAN,GAAoB,IAApB;AACAiD,QAAAA,KAAK,CAAClE,SAAN,CAAgBsE,OAAhB,CAAwBL,MAAM,CAACL,IAA/B;AACAM,QAAAA,KAAK,CAACjE,UAAN,GAAmB,EAAnB;AACA;;AACF,WAAK+C,gBAAL;AACEkB,QAAAA,KAAK,CAAClD,cAAN,GAAuB,KAAvB;AACAkD,QAAAA,KAAK,CAAChD,YAAN,GAAqB+C,MAAM,CAACM,KAA5B;AACA;;AAEF,WAAKtB,mBAAL;AACEiB,QAAAA,KAAK,CAAC/C,iBAAN,GAA0B,IAA1B;AACA+C,QAAAA,KAAK,CAAC9C,cAAN,GAAuB,KAAvB;AACA8C,QAAAA,KAAK,CAAC7C,eAAN,GAAwB,IAAxB;AACA;;AAEF,WAAK6B,mBAAL;AAA0B;AACxB,cAAMsB,MAAI,GAAGN,KAAK,CAAClE,SAAN,CAAgByE,IAAhB,CAAqB,UAACL,CAAD;AAAA,mBAAOA,CAAC,CAACM,EAAF,KAAST,MAAM,CAACL,IAAP,CAAYe,MAA5B;AAAA,WAArB,CAAb;;AACAH,UAAAA,MAAI,CAACU,QAAL,CAAcZ,OAAd,CAAsBL,MAAM,CAACL,IAA7B;;AACAM,UAAAA,KAAK,CAAC/C,iBAAN,GAA0B,KAA1B;AACA+C,UAAAA,KAAK,CAAC9C,cAAN,GAAuB,IAAvB;AACA,gBALwB,CAMxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;;AACT,WAAK+B,mBAAL;AACIe,QAAAA,KAAK,CAAC/C,iBAAN,GAA0B,KAA1B;AACA+C,QAAAA,KAAK,CAAC7C,eAAN,GAAwB4C,MAAM,CAACM,KAA/B;AACF;;AACA,WAAKnB,mBAAL;AACEc,QAAAA,KAAK,CAAC5C,iBAAN,GAA0B,IAA1B;AACA4C,QAAAA,KAAK,CAAC3C,cAAN,GAAuB,KAAvB;AACA2C,QAAAA,KAAK,CAAC1C,eAAN,GAAwB,IAAxB;AACF;;AAEA,WAAK6B,mBAAL;AACEa,QAAAA,KAAK,CAAClE,SAAN,GAAkBkE,KAAK,CAAClE,SAAN,CAAgBmE,MAAhB,CAAuB,UAACC,CAAD;AAAA,iBAAOA,CAAC,CAACM,EAAF,KAAST,MAAM,CAACL,IAAP,CAAYe,MAA5B;AAAA,SAAvB,CAAlB;AACAT,QAAAA,KAAK,CAAC5C,iBAAN,GAA0B,KAA1B;AACA4C,QAAAA,KAAK,CAAC1C,eAAN,GAAwB,IAAxB;AACF;;AAEA,WAAK8B,mBAAL;AACEY,QAAAA,KAAK,CAAC5C,iBAAN,GAA0B,KAA1B;AACA4C,QAAAA,KAAK,CAAC1C,eAAN,GAAwByC,MAAM,CAACM,KAA/B;AACD;;AACH;AACC;AAnJH;AAqJD,GAtJsD,CAAzC;AAAA,CAAhB;;AAwJA,eAAeR,OAAf","sourcesContent":["/* eslint-disable indent */\r\nimport produce from 'immer';\r\n\r\nexport const initialState = {\r\n    mainPosts: [],\r\n    imagePaths: [],\r\n    hasMorePost: true,\r\n    postAdded: false,\r\n    loadPostLoading: false,\r\n    loadPostDone: false,\r\n    loadPostError: null,\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError: null,\r\n    likePostLoading: false,\r\n    likePostDone: false,\r\n    likePostError: null,\r\n    unlikePostLoading: false,\r\n    unlikePostDone: false,\r\n    unlikePostError: null,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    uploadImagesLoading: false,\r\n    uploadImagesDone: false,\r\n    uploadImagesError: null,\r\n    retweetLoading: false,\r\n    retweetDone: false,\r\n    retweetError: null,\r\n\r\n};\r\n\r\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n//   id: shortId.generate(),\r\n//   User: {\r\n//     id: shortId.generate(),\r\n//     nickname: faker.name.findName(),\r\n//   },\r\n//   content: faker.lorem.paragraph(),\r\n//   Images: [{\r\n//     src: faker.image.image(),\r\n//   }],\r\n//   Comments: [{\r\n//     User: {\r\n//       id: shortId.generate(),\r\n//       nickname: faker.name.findName(),\r\n//     },\r\n//     content: faker.lorem.sentence(),\r\n//   }],\r\n// }));\r\n\r\n// console.log(initialState.mainPosts.length, 'aabaaaaaaaaaaaaaaaaaaaaaaaaaa');\r\n\r\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\r\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\r\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case REMOVE_IMAGE:\r\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\r\n        break;\r\n      case RETWEET_REQUEST:\r\n        draft.retweetLoading = true;\r\n        draft.retweetDone = false;\r\n        draft.retweetError = null;\r\n        break;\r\n      case RETWEET_SUCCESS: {\r\n        draft.retweetLoading = false;\r\n        draft.retweetDone = true;\r\n        draft.mainPosts.unshift(action.data);\r\n        break;\r\n      }\r\n      case RETWEET_FAILURE:\r\n        draft.retweetLoading = false;\r\n        draft.retweetError = action.error;\r\n        break;\r\n      case LIKE_POST_REQUEST:\r\n        draft.likePostLoading = true;\r\n        draft.likePostDone = false;\r\n        draft.likePostError = null;\r\n        break;\r\n      case LIKE_POST_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Likers.push({ id: action.data.UserId });\r\n        draft.likePostLoading = false;\r\n        draft.likePostDone = true;\r\n        break;\r\n      }\r\n      case LIKE_POST_FAILURE:\r\n        draft.likePostLoading = false;\r\n        draft.likePostError = action.error;\r\n        break;\r\n        case UNLIKE_POST_REQUEST:\r\n        draft.unlikePostLoading = true;\r\n        draft.unlikePostDone = false;\r\n        draft.unlikePostError = null;\r\n        break;\r\n      case UNLIKE_POST_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n        draft.unlikePostLoading = false;\r\n        draft.unlikePostDone = true;\r\n        break;\r\n      }\r\n      case UNLIKE_POST_FAILURE:\r\n        draft.unlikePostLoading = false;\r\n        draft.unlikePostError = action.error;\r\n        break;\r\n        case LOAD_POST_REQUEST:\r\n          draft.loadPostLoading = true;\r\n          draft.loadPostDone = false;\r\n          draft.loadPostError = null;\r\n          break;\r\n        case LOAD_POST_SUCCESS:\r\n          draft.loadPostLoading = false;\r\n          draft.loadPostDone = true;\r\n          draft.singlePost = action.data;\r\n          break;\r\n        case LOAD_POST_FAILURE:\r\n          draft.loadPostLoading = false;\r\n          draft.loadPostError = action.error;\r\n          break; \r\n\r\n      case LOAD_POSTS_REQUEST:\r\n        draft.loadPostsLoading = true;\r\n        draft.loadPostsDone = false;\r\n        draft.loadPostsError = null;\r\n        break;\r\n      case LOAD_POSTS_SUCCESS:\r\n        draft.loadPostsLoading = false;\r\n        draft.loadPostsDone = true;\r\n        draft.mainPosts = draft.mainPosts.concat(action.data);\r\n        draft.hasMorePost = action.data.length === 10;\r\n        break;\r\n      case LOAD_POSTS_FAILURE:\r\n        draft.loadPostsLoading = false;\r\n        draft.loadPostsError = action.error;\r\n        break;\r\n\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n        \r\n      case ADD_POST_SUCCESS:\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        draft.mainPosts.unshift(action.data);\r\n        draft.imagePaths = [];\r\n        break;\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      \r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n      \r\n      case ADD_COMMENT_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Comments.unshift(action.data);\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentDone = true;\r\n        break;\r\n        // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n        // console.log(postIndex, state.mainPosts.length);\r\n        // const post = { ...state.mainPosts[postIndex] };\r\n        // console.log(post);\r\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n        // const mainPosts = [...state.mainPosts];\r\n        // console.log(mainPosts);\r\n        // mainPosts[postIndex] = post;\r\n        //  return {\r\n        //               ...state,\r\n        //               mainPosts,\r\n        //               addCommentLoading: false,\r\n        //               addCommentDone: true,\r\n        //           };\r\n              }\r\n      case ADD_COMMENT_FAILURE:\r\n          draft.addCommentLoading = false;\r\n          draft.addCommentError = action.error;\r\n        break;\r\n        case REMOVE_POST_REQUEST:\r\n          draft.removePostLoading = true;\r\n          draft.removePostDone = false;\r\n          draft.removePostError = null;\r\n        break;\r\n  \r\n        case REMOVE_POST_SUCCESS:\r\n          draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\r\n          draft.removePostLoading = false;\r\n          draft.removePostError = true;\r\n        break;\r\n         \r\n        case REMOVE_POST_FAILURE:\r\n          draft.removePostLoading = false;\r\n          draft.removePostError = action.error;\r\n         break;\r\n      default:\r\n       break;\r\n    }\r\n  });\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}