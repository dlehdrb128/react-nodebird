{"ast":null,"code":"/* eslint-disable indent */\nimport shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  postAdded: false,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null\n};\ninitialState.mainPosts = initialState.mainPosts.concat(Array(20).fill().map(function () {\n  return {\n    id: shortId.generate(),\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.paragraph(),\n    Images: [{\n      src: faker.image.imageUrl()\n    }],\n    Comments: [{\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.sentence()\n    }]\n  };\n}));\nconsole.log(initialState.mainPosts.length, 'aabaaaaaaaaaaaaaaaaaaaaaaaaaa');\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    }\n  };\n}; // 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\n\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.postId;\n          });\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // console.log(postIndex, state.mainPosts.length);\n          // const post = { ...state.mainPosts[postIndex] };\n          // console.log(post);\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // console.log(mainPosts);\n          // mainPosts[postIndex] = post;\n          //  return {\n          //               ...state,\n          //               mainPosts,\n          //               addCommentLoading: false,\n          //               addCommentDone: true,\n          //           };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        draft.removePostLoading = false;\n        draft.removePostError = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/SangHo/Desktop/inflearn/react-nodebird/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","postAdded","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","concat","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","imageUrl","Comments","sentence","console","log","length","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","post","find","v","postId","filter"],"mappings":"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","sourcesContent":["/* eslint-disable indent */\r\nimport shortId from 'shortid';\r\nimport produce from 'immer';\r\nimport faker from 'faker';\r\n\r\nexport const initialState = {\r\n    mainPosts: [],\r\n    imagePaths: [],\r\n    postAdded: false,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n\r\n};\r\n\r\ninitialState.mainPosts = initialState.mainPosts.concat(\r\n  Array(20).fill().map(() => ({\r\n    id: shortId.generate(),\r\n    User: {\r\n      id: shortId.generate(),\r\n      nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.paragraph(),\r\n    Images: [{\r\n      src: faker.image.imageUrl(),\r\n    }],\r\n    Comments: [{\r\n      User: {\r\n        id: shortId.generate(),\r\n        nickname: faker.name.findName(),\r\n      },\r\n      content: faker.lorem.sentence(),\r\n    }],\r\n })),\r\n);\r\nconsole.log(initialState.mainPosts.length, 'aabaaaaaaaaaaaaaaaaaaaaaaaaaa');\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: '제로초',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: '제로초',\r\n  },\r\n});\r\n\r\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n        \r\n      case ADD_POST_SUCCESS:\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        draft.mainPosts.unshift(dummyPost(action.data));\r\n        break;\r\n  \r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      \r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n      \r\n      case ADD_COMMENT_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n        post.Comments.unshift(dummyComment(action.data.content));\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentDone = true;\r\n        break;\r\n        // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n        // console.log(postIndex, state.mainPosts.length);\r\n        // const post = { ...state.mainPosts[postIndex] };\r\n        // console.log(post);\r\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n        // const mainPosts = [...state.mainPosts];\r\n        // console.log(mainPosts);\r\n        // mainPosts[postIndex] = post;\r\n        //  return {\r\n        //               ...state,\r\n        //               mainPosts,\r\n        //               addCommentLoading: false,\r\n        //               addCommentDone: true,\r\n        //           };\r\n              }\r\n      case ADD_COMMENT_FAILURE:\r\n          draft.addCommentLoading = false;\r\n          draft.addCommentError = action.error;\r\n        break;\r\n        case REMOVE_POST_REQUEST:\r\n          draft.removePostLoading = true;\r\n          draft.removePostDone = false;\r\n          draft.removePostError = null;\r\n        break;\r\n  \r\n        case REMOVE_POST_SUCCESS:\r\n          draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n          draft.removePostLoading = false;\r\n          draft.removePostError = true;\r\n        break;\r\n         \r\n        case REMOVE_POST_FAILURE:\r\n          draft.removePostLoading = false;\r\n          draft.removePostError = action.error;\r\n         break;\r\n      default:\r\n       break;\r\n    }\r\n  });\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}