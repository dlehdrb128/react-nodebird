{"ast":null,"code":"import { all, fork, put, delay, takeLatest } from \"@redux-saga/core/effects\";\nimport axios from 'axios';\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  // 일로 들어옴\n  try {\n    //    const result = yield call(logInAPI,action.data) //첫번쨰 자리는 함수고 나머지는 인수들 \n    yield delay(1000);\n    yield put({\n      type: 'LOG_IN_SUCCESS' //    data:result.data\n\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    //  const result = yield call(logOutAPI)\n    yield delay(1000);\n    yield put({\n      type: 'LOG_OUT_REQUEST'\n    });\n    yield put({\n      type: 'LOG_OUT_SUCCESS' //  data:result.data\n\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: err.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest('LOG_IN_REQUEST', logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest('LOG_OUT_REQUEST', logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["C:/Users/SangHo/Desktop/inflearn/react-nodebird/front/sagas/user.js"],"names":["all","fork","put","delay","takeLatest","axios","logInAPI","data","post","logIn","action","type","err","logOutAPI","logOut","watchLogin","watchLogOut","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,KAAzB,EAAgCC,UAAhC,QAAkD,0BAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACD;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AAAK;AACzB,MAAI;AACR;AACG,UAAMP,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAC,gBADC,CAET;;AAFS,KAAD,CAAT;AAIC,GAPA,CAOC,OAAOC,GAAP,EAAY;AACV,UAAMV,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAC,gBADC;AAENJ,MAAAA,IAAI,EAACK,GAAG,CAACL;AAFH,KAAD,CAAT;AAIH;AACH;;AAED,SAASM,SAAT,GAAqB;AACjB,SAAOR,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUM,MAAV,GAAmB;AACf,MAAI;AAEN;AACA,UAAMX,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAC;AADC,KAAD,CAAT;AAGC,UAAMT,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAC,iBADC,CAEP;;AAFO,KAAD,CAAT;AAIC,GAXA,CAWC,OAAOC,GAAP,EAAY;AACV,UAAMV,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAC,iBADC;AAENJ,MAAAA,IAAI,EAACK,GAAG,CAACL;AAFH,KAAD,CAAT;AAIH;AACH;;AAKL,UAAUQ,UAAV,GAAuB;AACnB,QAAMX,UAAU,CAAC,gBAAD,EAAmBK,KAAnB,CAAhB;AACH;;AACD,UAAUO,WAAV,GAAwB;AACpB,QAAMZ,UAAU,CAAC,iBAAD,EAAmBU,MAAnB,CAAhB;AACH;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAChC,QAAMjB,GAAG,CAAC,CACTC,IAAI,CAACc,UAAD,CADK,EAETd,IAAI,CAACe,WAAD,CAFK,CAAD,CAAT;AAIH","sourcesContent":["import { all, fork, put, delay, takeLatest } from \"@redux-saga/core/effects\";\r\nimport axios from 'axios'\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post('/api/login', data)\r\n  } \r\n  \r\n  function* logIn(action) {    // 일로 들어옴\r\n      try {\r\n  //    const result = yield call(logInAPI,action.data) //첫번쨰 자리는 함수고 나머지는 인수들 \r\n     yield delay(1000);\r\n     yield put({\r\n         type:'LOG_IN_SUCCESS',\r\n      //    data:result.data\r\n      });\r\n     } catch (err) {\r\n         yield put({\r\n             type:'LOG_IN_FAILURE',\r\n             data:err.data\r\n         })\r\n     }\r\n  }\r\n  \r\n  function logOutAPI() {\r\n      return axios.post('/api/logout')\r\n    }\r\n\r\n    function* logOut() {\r\n        try {\r\n          \r\n      //  const result = yield call(logOutAPI)\r\n      yield delay(1000);\r\n      yield put({\r\n          type:'LOG_OUT_REQUEST',\r\n       });\r\n       yield put({\r\n           type:'LOG_OUT_SUCCESS',\r\n          //  data:result.data\r\n        });\r\n       } catch (err) {\r\n           yield put({\r\n               type:'LOG_OUT_FAILURE',\r\n               data:err.data\r\n           })\r\n       }\r\n    }\r\n  \r\n\r\n\r\n\r\nfunction* watchLogin() {\r\n    yield takeLatest('LOG_IN_REQUEST', logIn);\r\n}\r\nfunction* watchLogOut() {\r\n    yield takeLatest('LOG_OUT_REQUEST',logOut)\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n     fork(watchLogin),\r\n     fork(watchLogOut),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}