{"ast":null,"code":"/* eslint-disable indent */\nimport shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nimport { number } from 'prop-types';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  postAdded: false,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null\n};\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\nconsole.log(initialState.mainPosts.length, 'aabaaaaaaaaaaaaaaaaaaaaaaaaaa');\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  }\n}); // 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\n\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LOAD_POSTS_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(dummyPost(action.data));\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(dummyPost(action.data));\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        // console.log(postIndex, state.mainPosts.length);\n        // const post = { ...state.mainPosts[postIndex] };\n        // console.log(post);\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // console.log(mainPosts);\n        // mainPosts[postIndex] = post;\n        //  return {\n        //               ...state,\n        //               mainPosts,\n        //               addCommentLoading: false,\n        //               addCommentDone: true,\n        //           };\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n      draft.removePostLoading = false;\n      draft.removePostError = true;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/SangHo/Desktop/inflearn/react-nodebird/front/reducers/post.js"],"names":["shortId","produce","faker","number","initialState","mainPosts","imagePaths","postAdded","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","generateDummyPost","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","console","log","length","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","post","find","v","postId","filter"],"mappings":"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","sourcesContent":["/* eslint-disable indent */\r\nimport shortId from 'shortid';\r\nimport produce from 'immer';\r\nimport faker from 'faker';\r\nimport { number } from 'prop-types';\r\n\r\nexport const initialState = {\r\n    mainPosts: [],\r\n    imagePaths: [],\r\n    postAdded: false,\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError: null,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n\r\n};\r\n\r\nexport const generateDummyPost = (number) =>  Array(number).fill().map(() => ({\r\n  id: shortId.generate(),\r\n  User: {\r\n    id: shortId.generate(),\r\n    nickname: faker.name.findName(),\r\n  },\r\n  content: faker.lorem.paragraph(),\r\n  Images: [{\r\n    src: faker.image.image(),\r\n  }],\r\n  Comments: [{\r\n    User: {\r\n      id: shortId.generate(),\r\n      nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.sentence(),\r\n  }],\r\n}));\r\n\r\nconsole.log(initialState.mainPosts.length, 'aabaaaaaaaaaaaaaaaaaaaaaaaaaa');\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: '제로초',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: '제로초',\r\n  },\r\n});\r\n\r\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case LOAD_POSTS_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n        \r\n      case LOAD_POSTS_SUCCESS:\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        draft.mainPosts.unshift(dummyPost(action.data));\r\n        break;\r\n  \r\n      case LOAD_POSTS_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n        \r\n      case ADD_POST_SUCCESS:\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        draft.mainPosts.unshift(dummyPost(action.data));\r\n        break;\r\n  \r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      \r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n      \r\n      case ADD_COMMENT_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n        post.Comments.unshift(dummyComment(action.data.content));\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentDone = true;\r\n        break;\r\n        // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n        // console.log(postIndex, state.mainPosts.length);\r\n        // const post = { ...state.mainPosts[postIndex] };\r\n        // console.log(post);\r\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n        // const mainPosts = [...state.mainPosts];\r\n        // console.log(mainPosts);\r\n        // mainPosts[postIndex] = post;\r\n        //  return {\r\n        //               ...state,\r\n        //               mainPosts,\r\n        //               addCommentLoading: false,\r\n        //               addCommentDone: true,\r\n        //           };\r\n              }\r\n      case ADD_COMMENT_FAILURE:\r\n          draft.addCommentLoading = false;\r\n          draft.addCommentError = action.error;\r\n        break;\r\n        case REMOVE_POST_REQUEST:\r\n          draft.removePostLoading = true;\r\n          draft.removePostDone = false;\r\n          draft.removePostError = null;\r\n        break;\r\n  \r\n        case REMOVE_POST_SUCCESS:\r\n          draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n          draft.removePostLoading = false;\r\n          draft.removePostError = true;\r\n        break;\r\n         \r\n        case REMOVE_POST_FAILURE:\r\n          draft.removePostLoading = false;\r\n          draft.removePostError = action.error;\r\n         break;\r\n      default:\r\n       break;\r\n    }\r\n  });\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}