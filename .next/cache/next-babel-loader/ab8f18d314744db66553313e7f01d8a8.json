{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable indent */\nimport shortId from 'shortid';\nimport produce from 'immer';\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'nero'\n      },\n      content: '우와 개정판이 나왔군요~'\n    }, {\n      User: {\n        nickname: 'hero'\n      },\n      content: '얼른 사고 싶어요~'\n    }]\n  }],\n  imagePaths: [],\n  postAdded: false,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null\n};\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  }\n});\n\nconst reducer = (state = initialState, action) => {\n  console.log(action);\n\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        addPostLoading: false,\n        addPostDone: true\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n        console.log(postIndex, state.mainPosts.length);\n\n        const post = _objectSpread({}, state.mainPosts[postIndex]);\n\n        console.log(post);\n        post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        const mainPosts = [...state.mainPosts];\n        console.log(mainPosts);\n        mainPosts[postIndex] = post;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts,\n          addCommentLoading: false,\n          addCommentDone: true\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removeCommentLoading: false,\n        removeCommentError: action.error\n      });\n\n    case REMOVE_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostLoading: true,\n        removePostDone: false,\n        removePostError: null\n      });\n\n    case REMOVE_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: state.mainPosts.filter(v => v.id !== action.data),\n        removePostLoading: false,\n        removePostDone: true\n      });\n\n    case REMOVE_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostLoading: false,\n        removePostError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/SangHo/Desktop/inflearn/react-nodebird/front/reducers/post.js"],"names":["shortId","produce","initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","postAdded","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","generate","reducer","state","action","console","log","error","postIndex","findIndex","v","postId","length","post","removeCommentLoading","removeCommentError","filter"],"mappings":"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","sourcesContent":["/* eslint-disable indent */\r\nimport shortId from 'shortid';\r\nimport produce from 'immer';\r\n\r\nexport const initialState = {\r\n    mainPosts: [{\r\n        id: 1,\r\n        User: {\r\n            id: 1,\r\n            nickname: '제로초',\r\n        },\r\n        content: '첫 번째 게시글 #해시태그 #익스프레스',\r\n        Images: [{\r\n                src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\r\n            }, {\r\n                src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\r\n            }, {\r\n                src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\r\n\r\n        }],\r\n        Comments: [{\r\n            User: {\r\n                nickname: 'nero',\r\n            },\r\n            content: '우와 개정판이 나왔군요~',\r\n        }, {\r\n            User: {\r\n                nickname: 'hero',\r\n            },\r\n            content: '얼른 사고 싶어요~',\r\n        }],\r\n    }],\r\n    imagePaths: [],\r\n    postAdded: false,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n\r\n};\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: '제로초',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: '제로초',\r\n  },\r\n});\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  console.log(action);\r\n  switch (action.type) {\r\n    case ADD_POST_REQUEST:\r\n      return {\r\n        ...state,\r\n        addPostLoading: true,\r\n        addPostDone: false,\r\n        addPostError: null,\r\n      };\r\n\r\n    case ADD_POST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n        addPostLoading: false,\r\n        addPostDone: true,\r\n      };\r\n\r\n    case ADD_POST_FAILURE:\r\n      return {\r\n        ...state,\r\n        addPostLoading: false,\r\n        addPostError: action.error,\r\n      };\r\n\r\n    case ADD_COMMENT_REQUEST:\r\n      return {\r\n                    ...state,\r\n                    addCommentLoading: true,\r\n                    addCommentDone: false,\r\n                    addCommentError: null,\r\n                };\r\n\r\n    case ADD_COMMENT_SUCCESS: {\r\n      const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n      console.log(postIndex, state.mainPosts.length);\r\n      const post = { ...state.mainPosts[postIndex] };\r\n      console.log(post);\r\n      post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      const mainPosts = [...state.mainPosts];\r\n      console.log(mainPosts);\r\n      mainPosts[postIndex] = post;\r\n\r\n       return {\r\n                    ...state,\r\n                    mainPosts,\r\n                    addCommentLoading: false,\r\n                    addCommentDone: true,\r\n                };\r\n            }\r\n    case ADD_COMMENT_FAILURE:\r\n      return {\r\n        ...state,\r\n        removeCommentLoading: false,\r\n        removeCommentError: action.error,\r\n      };\r\n      case REMOVE_POST_REQUEST:\r\n        return {\r\n          ...state,\r\n          removePostLoading: true,\r\n          removePostDone: false,\r\n          removePostError: null,\r\n        };\r\n\r\n      case REMOVE_POST_SUCCESS:\r\n        return {\r\n          ...state,\r\n          mainPosts: state.mainPosts.filter((v) => v.id !== action.data),\r\n          removePostLoading: false,\r\n          removePostDone: true,\r\n        };\r\n      case REMOVE_POST_FAILURE:\r\n        return {\r\n          ...state,\r\n          removePostLoading: false,\r\n          removePostError: action.error,\r\n        };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}